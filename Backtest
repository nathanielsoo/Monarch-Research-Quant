import vectorbt as vbt
import numpy as np
import pandas as pd
from datetime import datetime, timedelta

# === USER INPUT ===
tickers = ['AAPL', 'MSFT']
weights = np.array([1.0, 1.0])
start = datetime.today() - timedelta(days=100)
end = datetime.today()
# ===================

# Download data
price = vbt.YFData.download(tickers, start=start, end=end).get('Close')
price = price.dropna()

# Compute spread
spread = price @ weights

# Simple mean-reversion signal
mean = spread.rolling(20).mean()
std = spread.rolling(20).std()

entries = spread < (mean - std)
exits = spread > mean

# Create orders for both assets when signal is on
entries = entries.reindex(price.index, method='ffill').fillna(False)
exits = exits.reindex(price.index, method='ffill').fillna(False)

# Convert signal to a position mask (0 or 1)
signal_active = entries.copy()
signal_active[exits] = False
signal_active = signal_active.ffill().fillna(False)

# Apply weights only when position is active
target_weights = pd.DataFrame(np.tile(weights, (len(price), 1)),
                              index=price.index,
                              columns=price.columns)

actual_weights = target_weights.where(signal_active, 0)

# Convert weights to target value (normalized to 1)
target_value = actual_weights.div(np.abs(actual_weights).sum(axis=1), axis=0).fillna(0)

# Backtest
pf = vbt.Portfolio.from_orders(
    close=price,
    size=target_value,
    size_type='targetpercent',
    direction='both',
    freq='1D'
)

# Performance
print(pf.stats().to_frame())
#pf.value().vbt.plot().show()

returns = pf.value().pct_change().fillna(0)
cum_returns = (1 + returns).cumprod() - 1
cum_returns.vbt.plot(title="PnL Curve (% Return)").show()

