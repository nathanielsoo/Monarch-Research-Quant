import vectorbt as vbt
import numpy as np
import pandas as pd
from datetime import datetime, timedelta

#=== USER INPUT ===
tickers = ['AAPL', 'MSFT']
start = datetime.today() - timedelta(days=100)
end = datetime.today()
# ===================

#Download data
price = vbt.YFData.download(tickers, start=start, end=end).get('Close')
price = price.dropna()

# Compute spread as price difference between MSFT and AAPL
spread = price['MSFT'] - price['AAPL']

# Mean and std for z-score
mean = spread.rolling(20).mean()
std = spread.rolling(20).std()
zscore = (spread - mean) / std

#Entry/exit conditions
entries_long = zscore <= -2
exits_long = zscore >= -1

entries_short = zscore >= 2
exits_short = zscore <= 1

#Initialize signals
signal = pd.Series(0, index=price.index, dtype=int)

#Apply long/short signal logic
signal[entries_long] = 1
signal[entries_short] = -1

#Exit logic
signal[exits_long & (signal.shift().eq(1))] = 0
signal[exits_short & (signal.shift().eq(-1))] = 0

#Forward-fill positions
signal = signal.replace(to_replace=0, method='ffill').fillna(0)

#Create weights based on signal direction
#Long: +0.5 * AAPL - 0.5 * MSFT
#Short: -0.5 * AAPL + 0.5 * MSFT
long_weights = np.array([0.5, -0.5])   # AAPL, MSFT
short_weights = np.array([-0.5, 0.5])  # AAPL, MSFT

#Build target weights DataFrame
target_weights = pd.DataFrame(index=price.index, columns=price.columns, dtype=float)

for i in range(len(price)):
    if signal.iloc[i] == 1:
        target_weights.iloc[i] = long_weights
    elif signal.iloc[i] == -1:
        target_weights.iloc[i] = short_weights
    else:
        target_weights.iloc[i] = [0, 0]

#Normalize to target percent
target_value = target_weights.div(np.abs(target_weights).sum(axis=1), axis=0).fillna(0)

#Backtest
pf = vbt.Portfolio.from_orders(
    close=price,
    size=target_value,
    size_type='targetpercent',
    direction='both',
    freq='1D'
)

#Show performance
print(pf.stats().to_frame())
# pf.value().vbt.plot().show()
